


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       *************************************************
    2 00000000         ;                                               uC/OS-II
                       
    3 00000000         ;                                         The Real-Time 
                       Kernel
    4 00000000         ;
    5 00000000         ;                          (c) Copyright 1992-2002, Jean
                        J. Labrosse, Weston, FL
    6 00000000         ;                                          All Rights Re
                       served
    7 00000000         ;
    8 00000000         ;
    9 00000000         ;                                          ARM9 Specific
                        code
   10 00000000         ;                                          LARGE MEMORY 
                       MODEL
   11 00000000         ;
   12 00000000         ;                                           Keil MDK
   13 00000000         ;                                       (ARM920T Compati
                       ble Target)
   14 00000000         ;
   15 00000000         ; File         : OS_CPU_A.S
   16 00000000         ; By           : Spartan 117
   17 00000000         ;*******************************************************
                       *************************************************
   18 00000000         
   19 00000000         ;*******************************************************
                       *************************************************
   20 00000000         ;                                    PUBLIC and EXTERNAL
                        REFERENCES
   21 00000000         ;*******************************************************
                       *************************************************
   22 00000000         
   23 00000000                 PRESERVE8
   24 00000000         
   25 00000000                 EXPORT           OSTickISR
   26 00000000                 EXPORT           OSStartHighRdy
   27 00000000                 EXPORT           OSCtxSw
   28 00000000                 EXPORT           OSIntCtxSw
   29 00000000         
   30 00000000                 IMPORT           OSTimeTick
   31 00000000                 IMPORT           OSIntEnter
   32 00000000                 IMPORT           OSIntExit
   33 00000000                 IMPORT           OSTaskSwHook
   34 00000000                 IMPORT           HandleIRQ
   35 00000000         
   36 00000000                 IMPORT           OSTCBHighRdy
   37 00000000                 IMPORT           OSTCBCur
   38 00000000                 IMPORT           OSPrioHighRdy
   39 00000000                 IMPORT           OSPrioCur
   40 00000000                 IMPORT           OSRunning
   41 00000000                 IMPORT           OSIntNesting
   42 00000000                 IMPORT           OSIntStk
   43 00000000         
   44 00000000 00000064 
                       OS_IntStkSIZE
                               EQU              100
   45 00000000 00000004 



ARM Macro Assembler    Page 2 


                       OS_StkItemSIZE
                               EQU              4
   46 00000000         
   47 00000000 00000010 
                       USRMODE EQU              0x10
   48 00000000 00000011 
                       FIQMODE EQU              0x11
   49 00000000 00000012 
                       IRQMODE EQU              0x12
   50 00000000 00000013 
                       SVCMODE EQU              0x13
   51 00000000 00000017 
                       ABTMODE EQU              0x17
   52 00000000 0000001B 
                       UNDMODE EQU              0x1B
   53 00000000 0000001F 
                       SYSMODE EQU              0x1F
   54 00000000 00000080 
                       IRQMSK  EQU              0x80
   55 00000000 00000040 
                       FIQMSK  EQU              0x40
   56 00000000 4A000000 
                       rSRCPND EQU              0x4A000000
   57 00000000 4A000010 
                       rINTPND EQU              0x4A000010
   58 00000000         
   59 00000000         
   60 00000000                 CODE32
   61 00000000                 AREA             OS_CPU_S,CODE,READONLY,ALIGN=2
   62 00000000         
   63 00000000         ;*******************************************************
                       **************************************************
   64 00000000         ;                                          START MULTITA
                       SKING
   65 00000000         ;                                       void OSStartHigh
                       Rdy(void)
   66 00000000         ;
   67 00000000         ; The stack frame is assumed to look as follows:
   68 00000000         ;
   69 00000000         ; OSTCBHighRdy=>OSTCBStkPtr -=> DS                      
                                (Low memory)
   70 00000000         ;                               ES
   71 00000000         ;                               DI
   72 00000000         ;                               SI
   73 00000000         ;                               BP
   74 00000000         ;                               SP
   75 00000000         ;                               BX
   76 00000000         ;                               DX
   77 00000000         ;                               CX
   78 00000000         ;                               AX
   79 00000000         ;                               OFFSET  of task code add
                       ress
   80 00000000         ;                               SEGMENT of task code add
                       ress
   81 00000000         ;                               Flags to load in PSW
   82 00000000         ;                               OFFSET  of task code add
                       ress
   83 00000000         ;                               SEGMENT of task code add
                       ress



ARM Macro Assembler    Page 3 


   84 00000000         ;                               OFFSET  of 'pdata'
   85 00000000         ;                               SEGMENT of 'pdata'      
                                (High memory)
   86 00000000         ;
   87 00000000         ; Note : OSStartHighRdy() MUST:
   88 00000000         ;           a) Call OSTaskSwHook() then,
   89 00000000         ;           b) Set OSRunning to TRUE,
   90 00000000         ;           c) Switch to the highest priority task.
   91 00000000         ;*******************************************************
                       **************************************************
   92 00000000         
   93 00000000         OSStartHighRdy                       ;This function runn
                                                            ing in SYS mode
   94 00000000 E1A0E00F        MOV              LR,PC       ;PC=PC+8
   95 00000004 E59FF16C        LDR              PC,=OSTaskSwHook ;Call user def
                                                            ined task switch ho
                                                            ok
   96 00000008         
   97 00000008 E59F016C        LDR              R0,=OSRunning
   98 0000000C E3A01001        LDR              R1,=1
   99 00000010 E5C01000        STRB             R1,[R0]     ;OSRunning = TRUE (
                                                            Indicates that mult
                                                            itasking has starte
                                                            d)
  100 00000014         
  101 00000014 E321F0DF        MSR              CPSR_c,#2_11011111 ;Switch to S
                                                            YS mode WITH INTRUP
                                                            T DISABLE
  102 00000018         
  103 00000018 E59F0160        LDR              R0,=OSTCBHighRdy
  104 0000001C E5900000        LDR              R0,[R0]
  105 00000020 E590D000        LDR              R13,[R0]    ;SP = OSTCBHighRdy=
                                                            >OSTCBStkPtr
  106 00000024         
  107 00000024 E8BD0003        LDMIA            R13!,{R0,R1} ;Get CPSR&PC
  108 00000028         
  109 00000028 E321F0D3        MSR              CPSR_c,#2_11010011 ;Switch to S
                                                            VC mode WITH INTRUP
                                                            T DISABLE
  110 0000002C         
  111 0000002C E1A0E001        MOV              LR,R1       ;PC=>LR_svc
  112 00000030 E16FF000        MSR              SPSR_cxsf,R0 ;CPSR=>SPSR_svc
  113 00000034         
  114 00000034 E321F0DF        MSR              CPSR_c,#2_11011111 ;Switch to S
                                                            YS mode WITH INTRUP
                                                            T DISABLE
  115 00000038         
  116 00000038 E8BD5FFF        LDMIA            R13!,{R0-R12,LR} ;Recover norma
                                                            l register
  117 0000003C         
  118 0000003C E321F0D3        MSR              CPSR_c,#2_11010011 ;Switch to S
                                                            VC mode WITH INTRUP
                                                            T DISABLE
  119 00000040         
  120 00000040 E1B0F00E        MOVS             PC,LR       ;Run Task
  121 00000044         
  122 00000044         
  123 00000044         ;*******************************************************
                       **************************************************



ARM Macro Assembler    Page 4 


  124 00000044         ;                                PERFORM A CONTEXT SWITC
                       H (From task level)
  125 00000044         ;                                           void OSCtxSw
                       (void)
  126 00000044         ;
  127 00000044         ; Note(s): 1) Upon entry,
  128 00000044         ;             OSTCBCur     points to the OS_TCB of the t
                       ask to suspend
  129 00000044         ;             OSTCBHighRdy points to the OS_TCB of the t
                       ask to resume
  130 00000044         ;
  131 00000044         ;          2) The stack frame of the task to suspend loo
                       ks as follows:
  132 00000044         ;
  133 00000044         ;                 SP => OFFSET  of task to suspend    (L
                       ow memory)
  134 00000044         ;                       SEGMENT of task to suspend
  135 00000044         ;                       PSW     of task to suspend    (H
                       igh memory)
  136 00000044         ;
  137 00000044         ;          3) The stack frame of the task to resume look
                       s as follows:
  138 00000044         ;
  139 00000044         ;                 OSTCBHighRdy=>OSTCBStkPtr -=> DS      
                                                (Low memory)
  140 00000044         ;                                               ES
  141 00000044         ;                                               DI
  142 00000044         ;                                               SI
  143 00000044         ;                                               BP
  144 00000044         ;                                               SP
  145 00000044         ;                                               BX
  146 00000044         ;                                               DX
  147 00000044         ;                                               CX
  148 00000044         ;                                               AX
  149 00000044         ;                                               OFFSET  
                       of task code address
  150 00000044         ;                                               SEGMENT 
                       of task code address
  151 00000044         ;                                               Flags to
                        load in PSW             (High memory)
  152 00000044         ;*******************************************************
                       **************************************************
  153 00000044         
  154 00000044         OSCtxSw                              ;This function runn
                                                            ing in SVC mode
  155 00000044         
  156 00000044 E321F0DF        MSR              CPSR_c,#2_11011111 ;Switch to S
                                                            YS mode WITH INTRUP
                                                            T DISABLE
  157 00000048         
  158 00000048 E92D5FFF        STMDB            R13!,{R0-R12,LR} ;Store normal 
                                                            register
  159 0000004C         
  160 0000004C E321F0D3        MSR              CPSR_c,#2_11010011 ;Switch to S
                                                            VC mode WITH INTRUP
                                                            T DISABLE
  161 00000050         
  162 00000050 E14F0000        MRS              R0,SPSR     ;CPSR=>R0
  163 00000054 E1A0100E        MOV              R1,LR       ;PC=>R1



ARM Macro Assembler    Page 5 


  164 00000058         
  165 00000058 E321F0DF        MSR              CPSR_c,#2_11011111 ;Switch to S
                                                            YS mode WITH INTRUP
                                                            T DISABLE
  166 0000005C         
  167 0000005C E92D0003        STMDB            R13!,{R0,R1} ;Store CPSR&PC
  168 00000060         
  169 00000060         
  170 00000060 E59F011C        LDR              R0,=OSTCBCur
  171 00000064 E5900000        LDR              R0,[R0]
  172 00000068 E580D000        STR              R13,[R0]    ;Store SP to TCB,Pr
                                                            ior task saved
  173 0000006C         
  174 0000006C E1A0E00F        MOV              LR,PC       ;PC=PC+8
  175 00000070 E59FF100        LDR              PC,=OSTaskSwHook ;Call user def
                                                            ined task switch ho
                                                            ok
  176 00000074         
  177 00000074 E59F010C        LDR              R0,=OSPrioHighRdy
  178 00000078 E5D01000        LDRB             R1,[R0]
  179 0000007C E59F0108        LDR              R0,=OSPrioCur
  180 00000080 E5C01000        STRB             R1,[R0]     ;OSPrioCur = OSPrio
                                                            HighRdy
  181 00000084         
  182 00000084 E59F00F4        LDR              R0,=OSTCBHighRdy
  183 00000088 E5901000        LDR              R1,[R0]
  184 0000008C E59F00F0        LDR              R0,=OSTCBCur
  185 00000090 E5801000        STR              R1,[R0]     ;OSTCBCur = OSTCBHi
                                                            ghRdy
  186 00000094         
  187 00000094 E591D000        LDR              R13,[R1]    ;SP = OSTCBHighRdy=
                                                            >OSTCBStkPtr 
  188 00000098         
  189 00000098 E8BD0003        LDMIA            R13!,{R0,R1} ;Get CPSR&PC
  190 0000009C         
  191 0000009C E321F0D3        MSR              CPSR_c,#2_11010011 ;Switch to S
                                                            VC mode WITH INTRUP
                                                            T DISABLE
  192 000000A0         
  193 000000A0 E1A0E001        MOV              LR,R1       ;PC=>LR_svc
  194 000000A4 E16FF000        MSR              SPSR_cxsf,R0 ;CPSR=>SPSR_svc
  195 000000A8         
  196 000000A8 E321F0DF        MSR              CPSR_c,#2_11011111 ;Switch to S
                                                            YS mode WITH INTRUP
                                                            T DISABLE
  197 000000AC         
  198 000000AC E8BD5FFF        LDMIA            R13!,{R0-R12,LR} ;Recover norma
                                                            l register
  199 000000B0         
  200 000000B0 E321F0D3        MSR              CPSR_c,#2_11010011 ;Switch to S
                                                            VC mode WITH INTRUP
                                                            T DISABLE
  201 000000B4         
  202 000000B4 E1B0F00E        MOVS             PC,LR       ;Run next Task
  203 000000B8         
  204 000000B8         
  205 000000B8         ;*******************************************************
                       **************************************************
  206 000000B8         ;                                PERFORM A CONTEXT SWITC



ARM Macro Assembler    Page 6 


                       H (From an ISR)
  207 000000B8         ;                                        void OSIntCtxSw
                       (void)
  208 000000B8         ;
  209 000000B8         ; Note(s): 1) Upon entry,
  210 000000B8         ;             OSTCBCur     points to the OS_TCB of the t
                       ask to suspend
  211 000000B8         ;             OSTCBHighRdy points to the OS_TCB of the t
                       ask to resume
  212 000000B8         ;
  213 000000B8         ;          2) The stack frame of the task to suspend loo
                       ks as follows:
  214 000000B8         ;
  215 000000B8         ;             OSTCBCur=>OSTCBStkPtr -----=>  DS         
                                            (Low memory)
  216 000000B8         ;                                            ES
  217 000000B8         ;                                            DI
  218 000000B8         ;                                            SI
  219 000000B8         ;                                            BP
  220 000000B8         ;                                            SP
  221 000000B8         ;                                            BX
  222 000000B8         ;                                            DX
  223 000000B8         ;                                            CX
  224 000000B8         ;                                            AX
  225 000000B8         ;                                            OFFSET  of 
                       task code address
  226 000000B8         ;                                            SEGMENT of 
                       task code address
  227 000000B8         ;                                            Flags to lo
                       ad in PSW            (High memory)
  228 000000B8         ;
  229 000000B8         ;
  230 000000B8         ;          3) The stack frame of the task to resume look
                       s as follows:
  231 000000B8         ;
  232 000000B8         ;             OSTCBHighRdy=>OSTCBStkPtr -=> DS          
                                            (Low memory)
  233 000000B8         ;                                           ES
  234 000000B8         ;                                           DI
  235 000000B8         ;                                           SI
  236 000000B8         ;                                           BP
  237 000000B8         ;                                           SP
  238 000000B8         ;                                           BX
  239 000000B8         ;                                           DX
  240 000000B8         ;                                           CX
  241 000000B8         ;                                           AX
  242 000000B8         ;                                           OFFSET  of t
                       ask code address
  243 000000B8         ;                                           SEGMENT of t
                       ask code address
  244 000000B8         ;                                           Flags to loa
                       d in PSW             (High memory)
  245 000000B8         ;*******************************************************
                       **************************************************
  246 000000B8         
  247 000000B8         OSIntCtxSw                           ;This function run 
                                                            in SYS mode
  248 000000B8         
  249 000000B8 E1A0E00F        MOV              LR,PC       ;PC=PC+8



ARM Macro Assembler    Page 7 


  250 000000BC E59FF0B4        LDR              PC,=OSTaskSwHook ;Call user def
                                                            ined task switch ho
                                                            ok
  251 000000C0         
  252 000000C0 E321F0DF        MSR              CPSR_c,#2_11011111 ;Switch to S
                                                            YS mode WITH INTRUP
                                                            T DISABLE
  253 000000C4         
  254 000000C4 E59F00BC        LDR              R0,=OSPrioHighRdy
  255 000000C8 E5D01000        LDRB             R1,[R0]
  256 000000CC E59F00B8        LDR              R0,=OSPrioCur
  257 000000D0 E5C01000        STRB             R1,[R0]     ;OSPrioCur = OSPrio
                                                            HighRdy
  258 000000D4         
  259 000000D4 E59F00A4        LDR              R0,=OSTCBHighRdy
  260 000000D8 E5901000        LDR              R1,[R0]
  261 000000DC E59F00A0        LDR              R0,=OSTCBCur
  262 000000E0 E5801000        STR              R1,[R0]     ;OSTCBCur = OSTCBHi
                                                            ghRdy
  263 000000E4         
  264 000000E4 E591D000        LDR              R13,[R1]    ;SP = OSTCBHighRdy=
                                                            >OSTCBStkPtr 
  265 000000E8         
  266 000000E8 E8BD0003        LDMIA            R13!,{R0,R1} ;Get CPSR&PC
  267 000000EC E321F0D2        MSR              CPSR_c,#2_11010010 ;Switch to I
                                                            RQ mode WITH INTRUP
                                                            T DISABLE
  268 000000F0 E1A0E001        MOV              LR,R1       ;PC=>LR_irq
  269 000000F4 E16FF000        MSR              SPSR_cxsf,R0 ;CPSR=>SPSR_irq
  270 000000F8 E321F0DF        MSR              CPSR_c,#2_11011111 ;Switch to S
                                                            YS mode WITH INTRUP
                                                            T DISABLE
  271 000000FC E8BD5FFF        LDMIA            R13!,{R0-R12,LR} ;Recover norma
                                                            l register
  272 00000100 E321F0D2        MSR              CPSR_c,#2_11010010 ;Switch to I
                                                            RQ mode WITH INTRUP
                                                            T DISABLE
  273 00000104         
  274 00000104 E1B0F00E        MOVS             PC,LR       ;Run next Task
  275 00000108         
  276 00000108         
  277 00000108         ;*******************************************************
                       **************************************************
  278 00000108         ;                                            HANDLE TICK
                        ISR
  279 00000108         ;
  280 00000108         ; Description: This function is called 199.99 times per 
                       second or, 11 times faster than the normal DOS
  281 00000108         ;              tick rate of 18.20648 Hz.  Thus every 11t
                       h time, the normal DOS tick handler is called.
  282 00000108         ;              This is called chaining.  10 times out of
                        11, however, the interrupt controller on the PC
  283 00000108         ;              must be cleared to allow for the next int
                       errupt.
  284 00000108         ;
  285 00000108         ; Arguments  : none
  286 00000108         ;
  287 00000108         ; Returns    : none
  288 00000108         ;



ARM Macro Assembler    Page 8 


  289 00000108         ; Note(s)    : The following C-like pseudo-code describe
                        the operation being performed in the code below.
  290 00000108         ;
  291 00000108         ;              Save all registers on the current task's 
                       stack;
  292 00000108         ;              OSIntNesting++;
  293 00000108         ;              if (OSIntNesting == 1) {
  294 00000108         ;                 OSTCBCur=>OSTCBStkPtr = SS:SP
  295 00000108         ;              }
  296 00000108         ;              OSTickDOSCtr--;
  297 00000108         ;              if (OSTickDOSCtr == 0) {
  298 00000108         ;                  OSTickDOSCtr = 11;
  299 00000108         ;                  INT 81H;               Chain into DOS
                        every 54.925 mS
  300 00000108         ;                                         (Interrupt wil
                       l be cleared by DOS)
  301 00000108         ;              } else {
  302 00000108         ;                  Send EOI to PIC;       Clear tick int
                       errupt by sending an End-Of-Interrupt to the 8259
  303 00000108         ;                                         PIC (Priority 
                       Interrupt Controller)
  304 00000108         ;              }
  305 00000108         ;              OSTimeTick();              Notify uC/OS-I
                       I that a tick has occured
  306 00000108         ;              OSIntExit();               Notify uC/OS-I
                       I about end of ISR
  307 00000108         ;              Restore all registers that were save on t
                       he current task's stack;
  308 00000108         ;              Return from Interrupt;
  309 00000108         ;*******************************************************
                       **************************************************
  310 00000108         ;
  311 00000108         OSTickISR                            ;This function runn
                                                            ing in IRQ mode
  312 00000108 E321F0D2        MSR              CPSR_c,#2_11010010 ;Switch to I
                                                            RQ mode WITH INTRUP
                                                            T DISABLE
  313 0000010C E59F007C        LDR              R0,=rINTPND
  314 00000110 E5901000        LDR              R1,[R0]
  315 00000114 E3A0044A        LDR              R0,=rSRCPND
  316 00000118 E5801000        STR              R1,[R0]
  317 0000011C E59F006C        LDR              R0,=rINTPND
  318 00000120 E5801000        STR              R1,[R0]     ;Clear TIMER4's Int
                                                            errupt Request
  319 00000124         
  320 00000124 E321F01F        MSR              CPSR_c,#2_00011111 ;Switch to S
                                                            YS mode WITH INTRUP
                                                            T ENABLE
  321 00000128         
  322 00000128 E1A0E00F        MOV              LR,PC
  323 0000012C E59FF060        LDR              PC,=OSTimeTick
  324 00000130         
  325 00000130 E1A0E00F        MOV              LR,PC
  326 00000134 E59FF05C        LDR              PC,=OSIntExit
  327 00000138         
  328 00000138 E321F0DF        MSR              CPSR_c,#2_11011111 ;Switch to S
                                                            YS mode WITH INTRUP
                                                            T DISABLE,ISR end
  329 0000013C         



ARM Macro Assembler    Page 9 


  330 0000013C E59F0058        LDR              R0,=OSIntNesting
  331 00000140 E5D01000        LDRB             R1,[R0]     ;OSIntNesting=>R1
  332 00000144         
  333 00000144 E3510000        CMP              R1,#0       ;Test whether recov
                                                            er stack or not(for
                                                             nesting interrupt 
                                                            exit)
  334 00000148 1A000002        BNE              NoRecoverSP ;This label should 
                                                            change for differen
                                                            t ISR
  335 0000014C E59F0030        LDR              R0,=OSTCBCur
  336 00000150 E5900000        LDR              R0,[R0]
  337 00000154 E590D000        LDR              R13,[R0]    ;Recover SP_usr ONL
                                                            Y WHEN no interrupt
                                                             left
  338 00000158         NoRecoverSP
  339 00000158 E8BD0003        LDMIA            R13!,{R0,R1} ;Get CPSR&PC
  340 0000015C E321F0D2        MSR              CPSR_c,#2_11010010 ;Switch to I
                                                            RQ mode WITH INTRUP
                                                            T DISABLE
  341 00000160 E1A0E001        MOV              LR,R1       ;PC=>LR_irq
  342 00000164 E16FF000        MSR              SPSR_cxsf,R0 ;CPSR=>SPSR_irq
  343 00000168 E321F0DF        MSR              CPSR_c,#2_11011111 ;Switch to S
                                                            YS mode WITH INTRUP
                                                            T DISABLE
  344 0000016C E8BD5FFF        LDMIA            R13!,{R0-R12,LR} ;Recover norma
                                                            l register
  345 00000170 E321F0D2        MSR              CPSR_c,#2_11010010 ;Switch to I
                                                            RQ mode WITH INTRUP
                                                            T DISABLE
  346 00000174         
  347 00000174 E1B0F00E        MOVS             PC,LR
  348 00000178         
  349 00000178         
  350 00000178                 END
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              00000000 
              4A000010 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --cpu=ARM920T --apcs=interwork --depend=.\build\os
_cpu_a.d -o.\build\os_cpu_a.o -ID:\Bitman\Keil_v5\ARM\RV31\INC -ID:\Bitman\Keil
_v5\ARM\CMSIS\Include -ID:\Bitman\Keil_v5\ARM\Inc\Samsung --list=.\os_cpu_a.lst
 src\cpu\OS_CPU_A.S



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

NoRecoverSP 00000158

Symbol: NoRecoverSP
   Definitions
      At line 338 in file src\cpu\OS_CPU_A.S
   Uses
      At line 334 in file src\cpu\OS_CPU_A.S
Comment: NoRecoverSP used once
OSCtxSw 00000044

Symbol: OSCtxSw
   Definitions
      At line 154 in file src\cpu\OS_CPU_A.S
   Uses
      At line 27 in file src\cpu\OS_CPU_A.S
Comment: OSCtxSw used once
OSIntCtxSw 000000B8

Symbol: OSIntCtxSw
   Definitions
      At line 247 in file src\cpu\OS_CPU_A.S
   Uses
      At line 28 in file src\cpu\OS_CPU_A.S
Comment: OSIntCtxSw used once
OSStartHighRdy 00000000

Symbol: OSStartHighRdy
   Definitions
      At line 93 in file src\cpu\OS_CPU_A.S
   Uses
      At line 26 in file src\cpu\OS_CPU_A.S
Comment: OSStartHighRdy used once
OSTickISR 00000108

Symbol: OSTickISR
   Definitions
      At line 311 in file src\cpu\OS_CPU_A.S
   Uses
      At line 25 in file src\cpu\OS_CPU_A.S
Comment: OSTickISR used once
OS_CPU_S 00000000

Symbol: OS_CPU_S
   Definitions
      At line 61 in file src\cpu\OS_CPU_A.S
   Uses
      None
Comment: OS_CPU_S unused
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

ABTMODE 00000017

Symbol: ABTMODE
   Definitions
      At line 51 in file src\cpu\OS_CPU_A.S
   Uses
      None
Comment: ABTMODE unused
FIQMODE 00000011

Symbol: FIQMODE
   Definitions
      At line 48 in file src\cpu\OS_CPU_A.S
   Uses
      None
Comment: FIQMODE unused
FIQMSK 00000040

Symbol: FIQMSK
   Definitions
      At line 55 in file src\cpu\OS_CPU_A.S
   Uses
      None
Comment: FIQMSK unused
IRQMODE 00000012

Symbol: IRQMODE
   Definitions
      At line 49 in file src\cpu\OS_CPU_A.S
   Uses
      None
Comment: IRQMODE unused
IRQMSK 00000080

Symbol: IRQMSK
   Definitions
      At line 54 in file src\cpu\OS_CPU_A.S
   Uses
      None
Comment: IRQMSK unused
OS_IntStkSIZE 00000064

Symbol: OS_IntStkSIZE
   Definitions
      At line 44 in file src\cpu\OS_CPU_A.S
   Uses
      None
Comment: OS_IntStkSIZE unused
OS_StkItemSIZE 00000004

Symbol: OS_StkItemSIZE
   Definitions
      At line 45 in file src\cpu\OS_CPU_A.S
   Uses
      None
Comment: OS_StkItemSIZE unused
SVCMODE 00000013

Symbol: SVCMODE



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

   Definitions
      At line 50 in file src\cpu\OS_CPU_A.S
   Uses
      None
Comment: SVCMODE unused
SYSMODE 0000001F

Symbol: SYSMODE
   Definitions
      At line 53 in file src\cpu\OS_CPU_A.S
   Uses
      None
Comment: SYSMODE unused
UNDMODE 0000001B

Symbol: UNDMODE
   Definitions
      At line 52 in file src\cpu\OS_CPU_A.S
   Uses
      None
Comment: UNDMODE unused
USRMODE 00000010

Symbol: USRMODE
   Definitions
      At line 47 in file src\cpu\OS_CPU_A.S
   Uses
      None
Comment: USRMODE unused
rINTPND 4A000010

Symbol: rINTPND
   Definitions
      At line 57 in file src\cpu\OS_CPU_A.S
   Uses
      At line 313 in file src\cpu\OS_CPU_A.S
      At line 317 in file src\cpu\OS_CPU_A.S

rSRCPND 4A000000

Symbol: rSRCPND
   Definitions
      At line 56 in file src\cpu\OS_CPU_A.S
   Uses
      At line 315 in file src\cpu\OS_CPU_A.S
Comment: rSRCPND used once
13 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

HandleIRQ 00000000

Symbol: HandleIRQ
   Definitions
      At line 34 in file src\cpu\OS_CPU_A.S
   Uses
      None
Comment: HandleIRQ unused
OSIntEnter 00000000

Symbol: OSIntEnter
   Definitions
      At line 31 in file src\cpu\OS_CPU_A.S
   Uses
      None
Comment: OSIntEnter unused
OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 32 in file src\cpu\OS_CPU_A.S
   Uses
      At line 326 in file src\cpu\OS_CPU_A.S
Comment: OSIntExit used once
OSIntNesting 00000000

Symbol: OSIntNesting
   Definitions
      At line 41 in file src\cpu\OS_CPU_A.S
   Uses
      At line 330 in file src\cpu\OS_CPU_A.S
Comment: OSIntNesting used once
OSIntStk 00000000

Symbol: OSIntStk
   Definitions
      At line 42 in file src\cpu\OS_CPU_A.S
   Uses
      None
Comment: OSIntStk unused
OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 39 in file src\cpu\OS_CPU_A.S
   Uses
      At line 179 in file src\cpu\OS_CPU_A.S
      At line 256 in file src\cpu\OS_CPU_A.S

OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 38 in file src\cpu\OS_CPU_A.S
   Uses
      At line 177 in file src\cpu\OS_CPU_A.S
      At line 254 in file src\cpu\OS_CPU_A.S

OSRunning 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols


Symbol: OSRunning
   Definitions
      At line 40 in file src\cpu\OS_CPU_A.S
   Uses
      At line 97 in file src\cpu\OS_CPU_A.S
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 37 in file src\cpu\OS_CPU_A.S
   Uses
      At line 170 in file src\cpu\OS_CPU_A.S
      At line 184 in file src\cpu\OS_CPU_A.S
      At line 261 in file src\cpu\OS_CPU_A.S
      At line 335 in file src\cpu\OS_CPU_A.S

OSTCBHighRdy 00000000

Symbol: OSTCBHighRdy
   Definitions
      At line 36 in file src\cpu\OS_CPU_A.S
   Uses
      At line 103 in file src\cpu\OS_CPU_A.S
      At line 182 in file src\cpu\OS_CPU_A.S
      At line 259 in file src\cpu\OS_CPU_A.S

OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 33 in file src\cpu\OS_CPU_A.S
   Uses
      At line 95 in file src\cpu\OS_CPU_A.S
      At line 175 in file src\cpu\OS_CPU_A.S
      At line 250 in file src\cpu\OS_CPU_A.S

OSTimeTick 00000000

Symbol: OSTimeTick
   Definitions
      At line 30 in file src\cpu\OS_CPU_A.S
   Uses
      At line 323 in file src\cpu\OS_CPU_A.S
Comment: OSTimeTick used once
12 symbols
363 symbols in table
